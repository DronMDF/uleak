#summary Классификация проблем с памятью

== Утечка памяти ==

=== Симптомы ===
Чем дольше работает приложение, тем больше памяти оно использует.

=== Причина ===
Выделяемая память не освобождается, или освобождается не полностью.

=== Методы обнаружения ===
Подсчитывается количество одновременно выделенных блоков в каждой точке выделения (точке вызова менеджера памяти). Если количество блоков в точке постоянно растет - вероятно имеет место утечка.

== Переполнение блока ==

Порча данных после выделенного блока. Buffer Overflow в динамической памяти. Типичная ошибка при работе с си-строками.

== Использование блока после освобождения ==

Самая опасная форма - модификация блоков, последствия таких ошибок очень сложно предсказать. Запись в освобожденный блок может нарушить работу других потоков. Доступ на чтение может нарушить работу только читающего потока.

== Двойное освобождение блока ==

Если блок с момента освобождения не изменился, то менеджер памяти скорее всего отследит эту ситуацию, но если менеджер памяти уже успел подсуетиться и отдать этот блок кому-то еще, последствия просто непредсказуемы. Он скорее всего освободит его. При этом выделивший ее код останется в неведении.

== Использование неинициализированной памяти после выделения ==

== Блок нулевой длины == 

В стандарте си по этому поводу написано, что поведение может определяться реализацией. If the size of the space requested is zero, the behavior is implementation-deﬁned: either a null pointer is returned, or the behavior is as if the size were some nonzero value, except that the returned pointer shall not be used to access an object.

Однако далеко не всем приложения может понравиться NULL в ответ на malloc. Хотя помоему это наиболее правильный вариант. Допустимым также можно считать указатель куда нибудь на ридонли память, чтобы приложение не пыталось туда что-нибудь писать. Кстати вот не знаю как должен вести себя в этом случае operator new?

== Освобождение нулевого указателя == 

Освобождение нулевого указателя. Это даже и не проблема а вполне допустимая операция. Но если приложение дергает ее слишком часто - повод задуматься.

== Замусоривание памяти == 

Спонтанное замусоривание памяти. Скорее всего возникает в следствии других ошибок. Прежде чем бороться с духами в приложении, лучше разобраться с явными вещами. :)